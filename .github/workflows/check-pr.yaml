name: Check PR

on:
  pull_request:
    branches:
      - main
      - rel/*

jobs:
  check-style:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: "Run configure"
        run: |
          ./ccex configure

      - name: "Run linters"
        run: |
          ./ccex format --no-apply-patches

  build-and-test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        torch-version: ["2.5", "2.6"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Get Ubuntu codename
        id: os
        run: |
          CODENAME=$(lsb_release -cs)
          echo "codename=$CODENAME" >> "$GITHUB_OUTPUT"

      # TODO Enable this step after one-compiler 1.30.0 release.
      # - name: Download one-compiler package
      #   id: download
      #   uses: ./.github/actions/download-release-asset
      #   with:
      #     owner: Samsung
      #     repo: ONE
      #     tag: 1.30.0
      #     filename: one-compiler-${{ steps.os.outputs.codename }}_1.30.0_amd64.deb
      # - name: "Install one-compiler"
      #   run: |
      #     sudo dpkg -i ${{ steps.download.outputs.filename }}
      #     sudo apt-get install -f -y
      #     onecc --version

      - name: Download issue attatchment (one-compiler latest)
        run: |
          curl -L -o one-compiler-latest.zip \
            "https://github.com/user-attachments/files/19561702/one-compiler_1.30.0.25040116_amd64.zip"

      - name: Unzip and install the one-compiler package
        run: |
          unzip one-compiler-latest.zip -d one-compiler-package
          ls -l one-compiler-package

          sudo dpkg -i one-compiler-package/*.deb
          sudo apt-get install -f -y # fix dependencies if needed

      - name: Check installation
        run: |
          onecc --version || echo "Installation failed."

      - name: "Build package"
        run: |
          pip install setuptools
          ./ccex build

      - name: "Run install"
        shell: bash
        run: |
          TORCH_VERSION=${{ matrix.torch-version }}
          ./ccex install --dist --torch_ver $TORCH_VERSION
          pt2-to-circle -h

      - name: "Configure test"
        shell: bash
        run: |
          TORCH_VERSION=${{ matrix.torch-version }}
          ./ccex configure test --torch_ver $TORCH_VERSION

      - name: "Show torch package versions"
        shell: bash
        run: |
          pip list | grep torch

      - name: "Run test"
        shell: bash
        run: |
          ./ccex test

      - name: "Upload artifact"
        uses: actions/upload-artifact@v4
        with:
          name: "wheel-${{ matrix.torch-version }}"
          path: "./dist/"
